TODO:
- controllare una per una tutte le syscall

- Ogni volta che un processo si blocca (-> viene chiamato lo scheduler), bisogna aggiornare il CPU (3.8)


- trovare un filo logico e sequenziale migliore (il ritorno dopo un'eccezione, che sia SYS o interrupt, è troppo incasinata)


LEGGETE PRIMA DI COMINCIARE A FARE DEBUG:
1. ho cambiato qualche while con dei for perchè altrimenti dava problemi
2. condizione dell'interrupt nei terminali VA RIVISTA, entra quando non dovrebbe
3. c'è la parte commentata negli interrupt perchè ho cambiato il deviceSem e non avevo sbatti di cambiarlo ovunque
4. Ho inserito la macro per la disabilitazione dell'interrupt ma TEORICAMENTE dovrebbe farlo da solo (con l'invio di ACK)
5. ORA rimane loopato, bisogna capire il motivo

P.S. Problemi quando si accede al dato referenziato e lo si incrementa con ++;

Da fare quando funge tutto:
- creare un file unico con tutte le utilities comune a tutti i file, ovvero:
    - tutti i file extern
    - tutti gli include
    - funzioni ausiliare (P/V/findDevice ecc...)
- divisione .h e .c
- eliminare, se ancora ci sono, numeri assoluti (meglio inserirli come #define)

Da chiedere a Renzo:
- senso di una V bloccante
- perchè nella sezione 3.9 c'è scritto che un semaforo può 
    avere un valore negativo se i semafori sono tutti bloccanti
- caso in cui arriva un interrupt(interrupt handler) e alla 
    fine della risoluzione non c'è processo corrente nè ci sono processi in ready queue
- come distinguare interrupt trasmitted o receive